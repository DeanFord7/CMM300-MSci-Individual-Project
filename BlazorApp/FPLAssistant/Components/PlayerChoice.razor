@inject IDialogService DialogService

<div class="player-select @GetAvailabilityClass()">
    @if (PlayerData.ChanceOfPlaying != 100)
    {
        @if (PlayerData.News != null && PlayerData.News.ToLower().Contains("chance of playing") || PlayerData.News.ToLower().Contains("injury")) 
        {
            <MudText>Injured: @PlayerData.ChanceOfPlaying%</MudText>
        }
        else if (PlayerData.News != null && PlayerData.News.ToLower().Contains("suspended"))
        {
            <MudText>Suspended</MudText>
        }
    }
    <MudButton class="player-select" OnClick="HandlePlayerClick" Variant="Variant.Text">
        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" Style="@GetIconColour(PlayerData.Team)"></MudIcon>
    </MudButton>
    @if (PlayerData != null)
    {
        <MudText>@PlayerData.WebName</MudText>
        @if (PlayerData.PredictedScore != null)
        {
            <MudText>@PlayerData.PredictedScore</MudText>
        }
    }
</div>

<style scoped>
    .player-select {
        width: 150px;
        display: flex;
        flex-direction: column; /* Stack items vertically */
        align-items: center; /* Center items horizontally */
        justify-content: center; /* Center content */
        text-align: center; /* Center text */
    }

    .red-border {
        border: 2px solid;
        border-color: red;
        border-radius: 5px;
        color: red;
    }

    .orange-border {
        border: 2px solid;
        border-color: orange;
        border-radius: 5px;
        color: orange;
    }

    .yellow-border {
        border: 2px solid;
        border-color: yellow;
        border-radius: 5px;
        color: yellow;
    }
</style>

@code {
    [Parameter] 
    public int Index { get; set; }
    [Parameter]
    public PlayerData PlayerData { get; set; }
    [Parameter]
    public int Position { get; set; }
    [Parameter]
    public bool IsSubstituting { get; set; }
    [Parameter] 
    public EventCallback<PlayerData> OnPlayerSelected { get; set; }
    [Parameter]
    public EventCallback<int> PlayerSubbed { get; set; }
    [Parameter]
    public EventCallback<int> PlayerSubConfirmed { get; set; }
    [Parameter]
    public List<PlayerData> CurrentTeam { get; set; }

    public async Task HandlePlayerClick()
    {
        if (IsSubstituting)
        {
            await PlayerSubConfirmed.InvokeAsync(Index);
        }
        else
        {
            await OpenPlayerSearch();
        }
    }

    public async Task OpenPlayerSearch()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                BackdropClick = true
            };

        var parameters = new DialogParameters
            {
                ["Value"] = PlayerData,
                ["Position"] = Position,
                ["CurrentTeam"] = CurrentTeam
            };

        var dialog = await DialogService.ShowAsync<PlayerDialog>("Player Management", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is PlayerData selectedPlayer)
        {
            selectedPlayer.Index = Index;
            PlayerData = selectedPlayer;
            await OnPlayerSelected.InvokeAsync(selectedPlayer); // Invoke callback with index and player
            await InvokeAsync(StateHasChanged);
        }
        else if (!result.Canceled && result.Data is int indexToSub)
        {
            await PlayerSubbed.InvokeAsync(indexToSub);
        }
    }

    public string GetIconColour(int team)
    {
        switch (team)
        {
            case 1:
            case 3:
            case 4:
            case 12:
            case 14:
            case 16:
            case 17:
                return "color: red"; // lightred is not a CSS color, lightcoral is valid
            case 2:
            case 19:
                return "color: #9e1b32"; // claret is a deep red color, using hex for better control
            case 5:
                return "color: lightblue"; // valid CSS color name
            case 6:
            case 7:
            case 8:
            case 10:
            case 11:
                return "color: blue"; // valid CSS color name
            case 9:
            case 18:
                return "color: white; border: 1px solid black"; // valid CSS color name
            case 13:
                return "color: skyblue"; // valid CSS color name
            case 15:
                return "color: black"; // valid CSS color name
            case 20:
                return "color: orange"; // valid CSS color name
            default:
                return "color: black"; // fallback color in case of an unknown team
        }
    }

    public string GetAvailabilityClass()
    {
        switch(PlayerData.ChanceOfPlaying)
        {
            case 100:
                return null;
            case 75:
                return "yellow-border";
            case 50:
            case 25:
                return "orange-border";
            case 0:
                return "red-border";
            default:
                return null;
        }
    }
}
